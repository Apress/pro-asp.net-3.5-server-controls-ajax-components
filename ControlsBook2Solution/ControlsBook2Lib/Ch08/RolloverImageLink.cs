// Title: Pro ASP.NET 3.5 Server Controls and AJAX Components
//
// Chapter: 8 - Integrating Client-Side Script
// File: RolloverImageLink.cs
// Written by: Rob Cameron and Dale Michalk
//
// Copyright © 2007, Apress L.P.
using System;
using System.ComponentModel;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace ControlsBook2Lib.Ch08
{
  [ToolboxData("<{0}:RolloverImageLink runat=server></{0}:RolloverImageLink>"),
  DefaultProperty("NavigateUrl")]
  public class RolloverImageLink : Image
  {
    public virtual bool EnableClientScript
    {
      get
      {
        object script = ViewState["EnableClientScript"];
        return (script == null) ? true : (bool)script;
      }
      set
      {
        ViewState["EnableClientScript"] = value;
      }
    }

    public string NavigateUrl
    {
      get
      {
        object url = ViewState["NavigateUrl"];
        return (url == null) ? "" : (string)url;
      }
      set
      {
        ViewState["NavigateUrl"] = value;
      }
    }

    public string OverImageUrl
    {
      get
      {
        object url = ViewState["OverImageUrl"];
        return (url == null) ? "" : (string)url;
      }
      set
      {
        ViewState["OverImageUrl"] = value;
      }
    }

    public bool PreLoadImages
    {
      get
      {
        object pre = ViewState["PreLoadImages"];
        return (pre == null) ? true : (bool)pre;
      }
      set
      {
        ViewState["PreLoadImages"] = value;
      }
    }

    protected const string SWAP_FUNC = "__Image_Swap";
    protected const string SWAP_ARRAY = "__Image_Swap_Array";

    //@ symbol in front of the string preserves the layout of the string content
    protected const string SWAP_SCRIPT = @"
          function __Image_Swap(sName, sSrc)
          {
            document.images[sName].src = sSrc;
          }
          ";

    protected const string PRELOAD_SCRIPT = @"
          for (index = 0; index < {arrayname}; index++)
          {
            loadimg = new Image();
            loadimg.src = {arrayname}[index];
          }
          ";

    private bool renderClientScript = false;
    protected void DetermineRenderClientScript()
    {
      if (EnableClientScript &&
         Context.Request.Browser.EcmaScriptVersion.Major >= 1)
        renderClientScript = true;
    }

    protected override void OnPreRender(EventArgs e)
    {
      base.OnPreRender(e);

      DetermineRenderClientScript();

      if (renderClientScript)
      {
        // register the image-swapping JavaScript
        // if it is not already registered
        if (!Page.ClientScript.IsClientScriptBlockRegistered(
            typeof(RolloverImageLink), "SWAP_SCRIPT"))
        {
          Page.ClientScript.RegisterClientScriptBlock(
              typeof(RolloverImageLink),
             "SWAP_SCRIPT",
             SWAP_SCRIPT,
             true);
        }

        if (this.PreLoadImages)
        {
          // add image names to the
          // array of rollover images to be preloaded
          Page.ClientScript.RegisterArrayDeclaration(
              SWAP_ARRAY,
             "'" + ResolveUrl(this.ImageUrl) + "'," +
             "'" + ResolveUrl(this.OverImageUrl) + "'");

          // register the image, preloading JavaScript
          // if it is not already registered
          if (!Page.ClientScript.IsStartupScriptRegistered(
              typeof(RolloverImageLink), "PRELOAD_SCRIPT"))
          {
            Page.ClientScript.RegisterStartupScript(
               typeof(RolloverImageLink),
               "PRELOAD_SCRIPT",
               PRELOAD_SCRIPT.Replace("{arrayname}", SWAP_ARRAY),
               true);
          }
        }
      }
    }

    protected override void Render(HtmlTextWriter writer)
    {
      // ensure the control is used inside <form runat="server">
      Page.VerifyRenderingInServerForm(this);

      // set up attributes for the enclosing hyperlink
      // <a href></a> tag pair that go around the <img> tag
      writer.AddAttribute("href", this.NavigateUrl);

      // we have to create an ID for the <a> tag so that it
      // doesn't conflict with the <img> tag generated by
      // the base Image control
      writer.AddAttribute("name", this.UniqueID + "_href");

      // emit onmouseover/onmouseout attributes that handle
      // client events and invoke our image-swapping JavaScript
      // code if client supports it
      if (renderClientScript)
      {
        writer.AddAttribute("onmouseover",
           SWAP_FUNC + "('" + this.UniqueID + "','" +
           ResolveUrl(this.OverImageUrl) + "');");
        writer.AddAttribute("onmouseout",
           SWAP_FUNC + "('" + this.UniqueID + "','" +
           ResolveUrl(this.ImageUrl) + "');");
      }
      writer.RenderBeginTag(HtmlTextWriterTag.A);

      // use name attribute to identify HTML <img> element
      // for older browsers
      writer.AddAttribute("name", this.UniqueID);

      base.Render(writer);

      writer.RenderEndTag();
    }
  }
}